// Code generated by protoc-gen-go. DO NOT EDIT.
// source: epl/grpc/geometry_operators.proto

package grpc

import (
	context "context"
	fmt "fmt"
	protobuf "github.com/geo-grpc/geometry-client-go/epl/protobuf"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("epl/grpc/geometry_operators.proto", fileDescriptor_1d66f0e1286f0677) }

var fileDescriptor_1d66f0e1286f0677 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4c, 0x2d, 0xc8, 0xd1,
	0x4f, 0x2f, 0x2a, 0x48, 0xd6, 0x4f, 0x4f, 0xcd, 0xcf, 0x4d, 0x2d, 0x29, 0xaa, 0x8c, 0xcf, 0x2f,
	0x48, 0x2d, 0x4a, 0x2c, 0xc9, 0x2f, 0x2a, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x49,
	0x2d, 0xc8, 0x81, 0x30, 0x93, 0x4a, 0xd3, 0xa4, 0xa4, 0x41, 0x1a, 0x60, 0x3c, 0xb8, 0x26, 0x88,
	0xbc, 0xd1, 0x6b, 0x26, 0x2e, 0x41, 0x77, 0xa8, 0x90, 0x3f, 0xcc, 0x18, 0xa1, 0x40, 0x2e, 0x01,
	0xd7, 0x8a, 0xd4, 0xe4, 0xd2, 0x92, 0x54, 0x88, 0x58, 0x66, 0x7e, 0x9e, 0x90, 0xac, 0x1e, 0xb2,
	0xa9, 0x7a, 0x30, 0xc5, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x52, 0x32, 0xb8, 0xa4, 0x8b,
	0x4b, 0x73, 0x4a, 0x94, 0x18, 0x84, 0x42, 0xb9, 0x04, 0x82, 0x4b, 0x8a, 0x52, 0x13, 0x73, 0xe1,
	0x26, 0x16, 0x53, 0x68, 0xa4, 0x06, 0xa3, 0x01, 0xa3, 0x50, 0x38, 0x97, 0x10, 0xba, 0xb1, 0xae,
	0x15, 0xd4, 0x30, 0x38, 0x98, 0x4b, 0x04, 0x62, 0xb0, 0x5b, 0x66, 0x4e, 0x2a, 0x92, 0x9b, 0xc5,
	0x51, 0xf5, 0x82, 0x64, 0x9d, 0x33, 0x4a, 0xf3, 0xb2, 0x89, 0x31, 0xd4, 0x29, 0x91, 0x4b, 0x32,
	0x39, 0x3f, 0x17, 0x55, 0x21, 0x2c, 0x42, 0x9c, 0xc4, 0x30, 0xe2, 0x21, 0x00, 0xa4, 0x26, 0x80,
	0x31, 0x4a, 0x25, 0x3d, 0x35, 0x5f, 0x17, 0x25, 0xca, 0x75, 0x93, 0x73, 0x32, 0x53, 0xf3, 0x4a,
	0x74, 0xd3, 0xf3, 0xf5, 0x61, 0xc9, 0x61, 0x11, 0x13, 0x73, 0x50, 0x88, 0x7b, 0x12, 0x1b, 0xd8,
	0x60, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x38, 0x01, 0xa8, 0x51, 0x27, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GeometryOperatorsClient is the client API for GeometryOperators service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GeometryOperatorsClient interface {
	// Execute a single geometry operation
	ExecuteOperation(ctx context.Context, in *protobuf.OperatorRequest, opts ...grpc.CallOption) (*protobuf.OperatorResult, error)
	// Stream in requests and return a stream of results
	StreamOperations(ctx context.Context, opts ...grpc.CallOption) (GeometryOperators_StreamOperationsClient, error)
	StreamOperationsEx(ctx context.Context, opts ...grpc.CallOption) (GeometryOperators_StreamOperationsExClient, error)
	// stream in file chunks for a geometry file type and stream back results for each geometry encountered
	StreamFileOperations(ctx context.Context, opts ...grpc.CallOption) (GeometryOperators_StreamFileOperationsClient, error)
}

type geometryOperatorsClient struct {
	cc *grpc.ClientConn
}

func NewGeometryOperatorsClient(cc *grpc.ClientConn) GeometryOperatorsClient {
	return &geometryOperatorsClient{cc}
}

func (c *geometryOperatorsClient) ExecuteOperation(ctx context.Context, in *protobuf.OperatorRequest, opts ...grpc.CallOption) (*protobuf.OperatorResult, error) {
	out := new(protobuf.OperatorResult)
	err := c.cc.Invoke(ctx, "/epl.protobuf.GeometryOperators/ExecuteOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geometryOperatorsClient) StreamOperations(ctx context.Context, opts ...grpc.CallOption) (GeometryOperators_StreamOperationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GeometryOperators_serviceDesc.Streams[0], "/epl.protobuf.GeometryOperators/StreamOperations", opts...)
	if err != nil {
		return nil, err
	}
	x := &geometryOperatorsStreamOperationsClient{stream}
	return x, nil
}

type GeometryOperators_StreamOperationsClient interface {
	Send(*protobuf.OperatorRequest) error
	Recv() (*protobuf.OperatorResult, error)
	grpc.ClientStream
}

type geometryOperatorsStreamOperationsClient struct {
	grpc.ClientStream
}

func (x *geometryOperatorsStreamOperationsClient) Send(m *protobuf.OperatorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *geometryOperatorsStreamOperationsClient) Recv() (*protobuf.OperatorResult, error) {
	m := new(protobuf.OperatorResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *geometryOperatorsClient) StreamOperationsEx(ctx context.Context, opts ...grpc.CallOption) (GeometryOperators_StreamOperationsExClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GeometryOperators_serviceDesc.Streams[1], "/epl.protobuf.GeometryOperators/StreamOperationsEx", opts...)
	if err != nil {
		return nil, err
	}
	x := &geometryOperatorsStreamOperationsExClient{stream}
	return x, nil
}

type GeometryOperators_StreamOperationsExClient interface {
	Send(*protobuf.OperatorRequest) error
	Recv() (*protobuf.OperatorResult, error)
	grpc.ClientStream
}

type geometryOperatorsStreamOperationsExClient struct {
	grpc.ClientStream
}

func (x *geometryOperatorsStreamOperationsExClient) Send(m *protobuf.OperatorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *geometryOperatorsStreamOperationsExClient) Recv() (*protobuf.OperatorResult, error) {
	m := new(protobuf.OperatorResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *geometryOperatorsClient) StreamFileOperations(ctx context.Context, opts ...grpc.CallOption) (GeometryOperators_StreamFileOperationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GeometryOperators_serviceDesc.Streams[2], "/epl.protobuf.GeometryOperators/StreamFileOperations", opts...)
	if err != nil {
		return nil, err
	}
	x := &geometryOperatorsStreamFileOperationsClient{stream}
	return x, nil
}

type GeometryOperators_StreamFileOperationsClient interface {
	Send(*protobuf.FileChunk) error
	Recv() (*protobuf.OperatorResult, error)
	grpc.ClientStream
}

type geometryOperatorsStreamFileOperationsClient struct {
	grpc.ClientStream
}

func (x *geometryOperatorsStreamFileOperationsClient) Send(m *protobuf.FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *geometryOperatorsStreamFileOperationsClient) Recv() (*protobuf.OperatorResult, error) {
	m := new(protobuf.OperatorResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GeometryOperatorsServer is the server API for GeometryOperators service.
type GeometryOperatorsServer interface {
	// Execute a single geometry operation
	ExecuteOperation(context.Context, *protobuf.OperatorRequest) (*protobuf.OperatorResult, error)
	// Stream in requests and return a stream of results
	StreamOperations(GeometryOperators_StreamOperationsServer) error
	StreamOperationsEx(GeometryOperators_StreamOperationsExServer) error
	// stream in file chunks for a geometry file type and stream back results for each geometry encountered
	StreamFileOperations(GeometryOperators_StreamFileOperationsServer) error
}

func RegisterGeometryOperatorsServer(s *grpc.Server, srv GeometryOperatorsServer) {
	s.RegisterService(&_GeometryOperators_serviceDesc, srv)
}

func _GeometryOperators_ExecuteOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.OperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeometryOperatorsServer).ExecuteOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epl.protobuf.GeometryOperators/ExecuteOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeometryOperatorsServer).ExecuteOperation(ctx, req.(*protobuf.OperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeometryOperators_StreamOperations_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GeometryOperatorsServer).StreamOperations(&geometryOperatorsStreamOperationsServer{stream})
}

type GeometryOperators_StreamOperationsServer interface {
	Send(*protobuf.OperatorResult) error
	Recv() (*protobuf.OperatorRequest, error)
	grpc.ServerStream
}

type geometryOperatorsStreamOperationsServer struct {
	grpc.ServerStream
}

func (x *geometryOperatorsStreamOperationsServer) Send(m *protobuf.OperatorResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *geometryOperatorsStreamOperationsServer) Recv() (*protobuf.OperatorRequest, error) {
	m := new(protobuf.OperatorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GeometryOperators_StreamOperationsEx_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GeometryOperatorsServer).StreamOperationsEx(&geometryOperatorsStreamOperationsExServer{stream})
}

type GeometryOperators_StreamOperationsExServer interface {
	Send(*protobuf.OperatorResult) error
	Recv() (*protobuf.OperatorRequest, error)
	grpc.ServerStream
}

type geometryOperatorsStreamOperationsExServer struct {
	grpc.ServerStream
}

func (x *geometryOperatorsStreamOperationsExServer) Send(m *protobuf.OperatorResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *geometryOperatorsStreamOperationsExServer) Recv() (*protobuf.OperatorRequest, error) {
	m := new(protobuf.OperatorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GeometryOperators_StreamFileOperations_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GeometryOperatorsServer).StreamFileOperations(&geometryOperatorsStreamFileOperationsServer{stream})
}

type GeometryOperators_StreamFileOperationsServer interface {
	Send(*protobuf.OperatorResult) error
	Recv() (*protobuf.FileChunk, error)
	grpc.ServerStream
}

type geometryOperatorsStreamFileOperationsServer struct {
	grpc.ServerStream
}

func (x *geometryOperatorsStreamFileOperationsServer) Send(m *protobuf.OperatorResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *geometryOperatorsStreamFileOperationsServer) Recv() (*protobuf.FileChunk, error) {
	m := new(protobuf.FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GeometryOperators_serviceDesc = grpc.ServiceDesc{
	ServiceName: "epl.protobuf.GeometryOperators",
	HandlerType: (*GeometryOperatorsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteOperation",
			Handler:    _GeometryOperators_ExecuteOperation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamOperations",
			Handler:       _GeometryOperators_StreamOperations_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamOperationsEx",
			Handler:       _GeometryOperators_StreamOperationsEx_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamFileOperations",
			Handler:       _GeometryOperators_StreamFileOperations_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "epl/grpc/geometry_operators.proto",
}
